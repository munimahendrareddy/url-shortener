package com.urlshortner.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.urlshortner.common.ShorteningUtil;
import com.urlshortner.dto.FullUrl;
import com.urlshortner.dto.ShortUrl;
import com.urlshortner.model.UrlEntity;
import com.urlshortner.repository.UrlRepository;

@Service
public class UrlService {

	Logger logger = LoggerFactory.getLogger(UrlService.class);

	private final UrlRepository urlRepository;

	@Autowired
	public UrlService(UrlRepository urlRepository) {
		this.urlRepository = urlRepository;
	}

	private UrlEntity save(FullUrl fullUrl) {
		return urlRepository.save(new UrlEntity(fullUrl.getFullUrl()));
	}

	/**
	 * It saves the full url to database and uses the autogenerated id to convert to
	 * Base62 string
	 *
	 * @param fullUrl FullUrl object to be converted to shortened url
	 * @return ShortUrl object
	 */
	public ShortUrl getShortUrl(FullUrl fullUrl) {

		logger.info("Checking if the url already exists");
		List<UrlEntity> savedUrls = null;
		savedUrls = checkFullUrlAlreadyExists(fullUrl);

		UrlEntity savedUrl = null;

		if (savedUrls.isEmpty()) {
			logger.info(String.format("Saving Url %s to database", fullUrl.getFullUrl()));
			savedUrl = this.save(fullUrl);
			logger.debug(savedUrl.toString());
		} else {
			savedUrl = savedUrls.get(0);
			logger.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
		}

		logger.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
		String shortUrlText = ShorteningUtil.idToStr(savedUrl.getId());
		logger.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrlText));

		return new ShortUrl(shortUrlText);
	}

	/**
	 * Check if Url already exists in the database to prevent having same url stored
	 * multiple times
	 *
	 * @param fullUrl
	 * @return list of UrlEntity objects, list will be empty if no results found
	 */
	private List<UrlEntity> checkFullUrlAlreadyExists(FullUrl fullUrl) {
		return urlRepository.findUrlByFullUrl(fullUrl.getFullUrl());
	}
}
